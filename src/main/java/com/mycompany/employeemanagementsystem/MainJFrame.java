/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.employeemanagementsystem;

import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author davidkpeng
 */
public class MainJFrame extends javax.swing.JFrame {
    private MyHashTable theHT;
    private File employeesFile;
    private JFileChooser fileChooser;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        // Setting Look and Feel courtesy of the official Java tutorials
        // Sets L&F to the system default
        try {
            // Set System L&F
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } 
        catch (UnsupportedLookAndFeelException e) {
           e.printStackTrace();
        }
        catch (ClassNotFoundException e) {
           e.printStackTrace();
        }
        catch (InstantiationException e) {
           e.printStackTrace();
        }
        catch (IllegalAccessException e) {
           e.printStackTrace();
        }
        initComponents();
        theHT = new MyHashTable(10);
        fileChooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1_PTEAdd = new javax.swing.JTabbedPane();
        jPanel1_FTE = new javax.swing.JPanel();
        jButton1_FTEAdd = new javax.swing.JButton();
        jButton2_FTEEdit = new javax.swing.JButton();
        jButton3_FTERemove = new javax.swing.JButton();
        jButton4_FTESearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jFormattedTextField1_FTESearch = new javax.swing.JFormattedTextField();
        jButton1_FTEShowAll = new javax.swing.JButton();
        jLabel1_FTEImage = new javax.swing.JLabel();
        jPanel2_PTE = new javax.swing.JPanel();
        jButton1_PTEAdd = new javax.swing.JButton();
        jButton2_PTEEdit = new javax.swing.JButton();
        jButton3_PTERemove = new javax.swing.JButton();
        jButton4_PTESearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jFormattedTextField1_PTESearch = new javax.swing.JFormattedTextField();
        jButton1_PTEShowAll = new javax.swing.JButton();
        jLabel1_PTEImage = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1_Save = new javax.swing.JMenuItem();
        jMenuItem1_SaveAs = new javax.swing.JMenuItem();
        jMenuItem2_Load = new javax.swing.JMenuItem();
        jMenuItem1_Export = new javax.swing.JMenuItem();
        jMenuItem1_Import = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1_FTEAdd.setText("Add");
        jButton1_FTEAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_FTEAddActionPerformed(evt);
            }
        });

        jButton2_FTEEdit.setText("Edit");
        jButton2_FTEEdit.setToolTipText("");
        jButton2_FTEEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2_FTEEditActionPerformed(evt);
            }
        });

        jButton3_FTERemove.setText("Remove");
        jButton3_FTERemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3_FTERemoveActionPerformed(evt);
            }
        });

        jButton4_FTESearch.setText("Search");
        jButton4_FTESearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4_FTESearchActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "First Name", "Last Name", "Gender", "Location", "Deductions Rate", "Annual Salary", "Gross Pay", "Net Pay"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getSelectionModel().addListSelectionListener(
            new ListSelectionListener(){
                @Override
                public void valueChanged(ListSelectionEvent evt){
                    if (!evt.getValueIsAdjusting()){
                        updateImage(true, jTable1.getSelectedRow());
                    }
                }
            });
            jScrollPane1.setViewportView(jTable1);

            jFormattedTextField1_FTESearch.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

            jButton1_FTEShowAll.setText("Show All");
            jButton1_FTEShowAll.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1_FTEShowAllActionPerformed(evt);
                }
            });

            jLabel1_FTEImage.setBackground(new java.awt.Color(153, 153, 153));
            jLabel1_FTEImage.setOpaque(true);

            javax.swing.GroupLayout jPanel1_FTELayout = new javax.swing.GroupLayout(jPanel1_FTE);
            jPanel1_FTE.setLayout(jPanel1_FTELayout);
            jPanel1_FTELayout.setHorizontalGroup(
                jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1_FTELayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1_FTELayout.createSequentialGroup()
                            .addComponent(jFormattedTextField1_FTESearch, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4_FTESearch, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1_FTELayout.createSequentialGroup()
                            .addComponent(jScrollPane1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1_FTELayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel1_FTEImage, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1_FTEAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2_FTEEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3_FTERemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1_FTEShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addContainerGap())
            );
            jPanel1_FTELayout.setVerticalGroup(
                jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1_FTELayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1_FTELayout.createSequentialGroup()
                            .addComponent(jButton1_FTEAdd)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2_FTEEdit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton3_FTERemove)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel1_FTEImage, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                            .addComponent(jButton1_FTEShowAll))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1_FTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFormattedTextField1_FTESearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4_FTESearch)))
            );

            jTabbedPane1_PTEAdd.addTab("Full Time Employees", jPanel1_FTE);

            jButton1_PTEAdd.setText("Add");
            jButton1_PTEAdd.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1_PTEAddActionPerformed(evt);
                }
            });

            jButton2_PTEEdit.setText("Edit");
            jButton2_PTEEdit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2_PTEEditActionPerformed(evt);
                }
            });

            jButton3_PTERemove.setText("Remove");
            jButton3_PTERemove.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3_PTERemoveActionPerformed(evt);
                }
            });

            jButton4_PTESearch.setText("Search");
            jButton4_PTESearch.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4_PTESearchActionPerformed(evt);
                }
            });

            jTable2.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "Number", "First Name", "Last Name", "Gender", "Location", "Deductions Rate", "Hourly Wage", "Hours Per Week", "Weeks Per Year", "Gross Pay", "Net Pay"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            jTable2.getSelectionModel().addListSelectionListener(
                new ListSelectionListener(){
                    @Override
                    public void valueChanged(ListSelectionEvent evt){
                        if (!evt.getValueIsAdjusting()){
                            updateImage(false, jTable2.getSelectedRow());
                        }
                    }
                });
                jScrollPane2.setViewportView(jTable2);

                jFormattedTextField1_PTESearch.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

                jButton1_PTEShowAll.setText("Show All");
                jButton1_PTEShowAll.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1_PTEShowAllActionPerformed(evt);
                    }
                });

                jLabel1_PTEImage.setBackground(new java.awt.Color(153, 153, 153));
                jLabel1_PTEImage.setOpaque(true);

                javax.swing.GroupLayout jPanel2_PTELayout = new javax.swing.GroupLayout(jPanel2_PTE);
                jPanel2_PTE.setLayout(jPanel2_PTELayout);
                jPanel2_PTELayout.setHorizontalGroup(
                    jPanel2_PTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2_PTELayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2_PTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFormattedTextField1_PTESearch, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                            .addGroup(jPanel2_PTELayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                                .addGap(6, 6, 6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_PTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2_PTEEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3_PTERemove, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4_PTESearch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1_PTEAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1_PTEShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_PTELayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1_PTEImage, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)))
                        .addContainerGap())
                );
                jPanel2_PTELayout.setVerticalGroup(
                    jPanel2_PTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2_PTELayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2_PTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2_PTELayout.createSequentialGroup()
                                .addComponent(jButton1_PTEAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2_PTEEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3_PTERemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1_PTEImage, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                .addComponent(jButton1_PTEShowAll))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_PTELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFormattedTextField1_PTESearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4_PTESearch))
                        .addGap(3, 3, 3))
                );

                jTabbedPane1_PTEAdd.addTab("Part Time Employees", jPanel2_PTE);

                jMenu1.setText("File");

                jMenuItem1_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1_Save.setText("Save");
                jMenuItem1_Save.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1_SaveActionPerformed(evt);
                    }
                });
                jMenu1.add(jMenuItem1_Save);

                jMenuItem1_SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1_SaveAs.setText("Save As");
                jMenuItem1_SaveAs.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1_SaveAsActionPerformed(evt);
                    }
                });
                jMenu1.add(jMenuItem1_SaveAs);

                jMenuItem2_Load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem2_Load.setText("Load");
                jMenuItem2_Load.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem2_LoadActionPerformed(evt);
                    }
                });
                jMenu1.add(jMenuItem2_Load);

                jMenuItem1_Export.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1_Export.setText("Export");
                jMenuItem1_Export.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1_ExportActionPerformed(evt);
                    }
                });
                jMenu1.add(jMenuItem1_Export);

                jMenuItem1_Import.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1_Import.setText("Import");
                jMenuItem1_Import.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1_ImportActionPerformed(evt);
                    }
                });
                jMenu1.add(jMenuItem1_Import);

                jMenuBar1.add(jMenu1);

                setJMenuBar(jMenuBar1);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1_PTEAdd)
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1_PTEAdd)
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents
    
    
    
    private void jMenuItem2_LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2_LoadActionPerformed
        // TODO add your handling code here: 
        //Loading a file
        ((DefaultTableModel)this.jTable1.getModel()).setRowCount(0);
        ((DefaultTableModel)this.jTable2.getModel()).setRowCount(0);
        //this.fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int openResult = this.fileChooser.showOpenDialog(this);
        if (openResult == JFileChooser.APPROVE_OPTION){
            this.employeesFile = this.fileChooser.getSelectedFile();
        }
        FileReader fr = null;
        BufferedReader br = null;
        try{
            fr = new FileReader(this.employeesFile.getAbsolutePath());
        }catch (FileNotFoundException e){
            System.out.println("Either file not found or something went wrong");
        }
        try{
            br = new BufferedReader(fr);
            String ln;
            while ((ln=br.readLine()) != null){
                String[] strp = ln.split(", ");
                if (strp[0].equals("FTE")){
                    FTE newFTE = (FTE) this.createEmployee(strp);
                    theHT.addToTable(newFTE);
                    //theHT.displayTable();
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    model.addRow(this.changeStringsToRows(strp));                    
                }else if(strp[0].equals("PTE")){
                    PTE newPTE = (PTE) this.createEmployee(strp);
                    theHT.addToTable(newPTE);
                    //theHT.displayTable();
                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                    model.addRow(this.changeStringsToRows(strp));
                }else {
                    System.out.println("Input Error");
                }
            }
        }catch (Exception e){
            System.out.println("Some error occurred");
        }finally{
            try{
                if (br!=null){
                    br.close();
                }
            }catch(Exception ex){
                System.out.println("Error in opening the BufferedReader" + ex);
            }
        }
    }//GEN-LAST:event_jMenuItem2_LoadActionPerformed

    private void jMenuItem1_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1_SaveActionPerformed
        // TODO add your handling code here:
        //Saving a file
        FileWriter fw = null;
        BufferedWriter bw = null;
        if (this.employeesFile == null){
            int saveResult = this.fileChooser.showSaveDialog(this);
             if (saveResult == JFileChooser.APPROVE_OPTION){
                this.employeesFile = fileChooser.getSelectedFile();
            }
        }
        try {
            fw = new FileWriter(this.employeesFile);
            bw = new BufferedWriter(fw);
            ArrayList<EmployeeInfo> allContent = this.theHT.getAllFromTable();
            
            
            for (EmployeeInfo e: allContent){
                if (e instanceof FTE){
                    String out = "FTE, " + e.getEmpNumber() + ", " 
                            + e.getFirstName() + ", " + e.getLastName() + ", "
                            + e.getGender() + ", " + e.getWorkLocation() + ", "
                            + e.getDeductionsRate() + ", " + ((FTE) e).getAnnualSalary()
                            + ", " + e.getPhotoPath();
                    bw.write(out);
                    bw.newLine();
                }else if (e instanceof PTE){
                    String out = "PTE, " + e.getEmpNumber() + ", " 
                            + e.getFirstName() + ", " + e.getLastName() + ", "
                            + e.getGender() + ", " + e.getWorkLocation() + ", "
                            + e.getDeductionsRate() + ", " + ((PTE) e).getHourlyWage() + ", "
                            + ((PTE) e).getHoursPerWeek() + ", " + ((PTE) e).getWeeksPerYear()
                            + ", " + e.getPhotoPath();
                    bw.write(out);
                    bw.newLine();
                }
            }
        } catch (IOException ioe) {
	   ioe.printStackTrace();
	}finally{ 
	   try{
	      if(bw!=null)
		 bw.close();
	   }catch(Exception ex){
	       System.out.println("Error in closing the BufferedWriter"+ex);
	    }
	}
    }//GEN-LAST:event_jMenuItem1_SaveActionPerformed

    private void jButton1_FTEAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_FTEAddActionPerformed
        // TODO add your handling code here:
        // Adding an employee
        AddEmployeeJFrame addEmployeeJFrame = new AddEmployeeJFrame();
        addEmployeeJFrame.setVisible(true);
        addEmployeeJFrame.setMainFTETableModel((DefaultTableModel) jTable1.getModel());
        addEmployeeJFrame.setMainPTETableModel((DefaultTableModel) jTable2.getModel());
        addEmployeeJFrame.setMainHT(theHT);
    }//GEN-LAST:event_jButton1_FTEAddActionPerformed

    private void jButton4_FTESearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4_FTESearchActionPerformed
        // TODO add your handling code here:
        // Searching, exact matches are displayed at the top and partial matches after
        ((DefaultTableModel)this.jTable1.getModel()).setRowCount(0);
        ((DefaultTableModel)this.jTable2.getModel()).setRowCount(0);
        String query = this.jFormattedTextField1_FTESearch.getText();
        ArrayList<EmployeeInfo> allEmployees = theHT.getAllFromTable();
        for (EmployeeInfo e: allEmployees){
            if (Integer.toString(e.getEmpNumber()).equals(query)){
                Object[] matchingRow = this.changeObjectsToRows(e);
                if (e instanceof FTE){
                    ((DefaultTableModel)this.jTable1.getModel()).addRow(matchingRow);
                }else if (e instanceof PTE){
                    ((DefaultTableModel)this.jTable2.getModel()).addRow(matchingRow);
                }
            }
        }
        for (EmployeeInfo e: allEmployees){
            String empNumString = Integer.toString(e.getEmpNumber());
            boolean subcheck = empNumString.contains(query);
            if (subcheck && !empNumString.equals(query)){
                Object[] matchingRow = this.changeObjectsToRows(e);
                if (e instanceof FTE){
                    ((DefaultTableModel)this.jTable1.getModel()).addRow(matchingRow);
                }else if (e instanceof PTE){
                    ((DefaultTableModel)this.jTable2.getModel()).addRow(matchingRow);
                }
            }
        }
    }//GEN-LAST:event_jButton4_FTESearchActionPerformed

    private void jButton3_FTERemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3_FTERemoveActionPerformed
        // TODO add your handling code here:
        // Removing an employee
        int rowToRemove = jTable1.getSelectedRow();
        if (rowToRemove != -1){
            int empNum = this.getEmployeeNumberFromSelectedRow(jTable1);
            theHT.removeFromTable(empNum);
            DefaultTableModel jTable1Model = (DefaultTableModel) jTable1.getModel();
            jTable1Model.removeRow(rowToRemove);
        }
    }//GEN-LAST:event_jButton3_FTERemoveActionPerformed

    private void jButton2_FTEEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2_FTEEditActionPerformed
        // TODO add your handling code here:
        // Editing an employee by removing them and passing their data into 
        // the AddEmployeeJFrame in its Edit mode
        int rowToEdit = jTable1.getSelectedRow();
        if (rowToEdit != -1){
            int empNum = Integer.parseInt(jTable1.getModel().getValueAt(rowToEdit, 0).toString());
            String firstName = jTable1.getModel().getValueAt(rowToEdit, 1).toString();
            String lastName = jTable1.getModel().getValueAt(rowToEdit, 2).toString();
            String genderS = jTable1.getModel().getValueAt(rowToEdit, 3).toString();
            String workLS = jTable1.getModel().getValueAt(rowToEdit, 4).toString();
            double deductionsRate = Double.parseDouble(jTable1.getModel().getValueAt(rowToEdit, 5).toString());
            double annualSalary = Double.parseDouble(jTable1.getModel().getValueAt(rowToEdit, 6).toString());


            FTE removedFTE = (FTE) theHT.removeFromTable(empNum);

            AddEmployeeJFrame editEmployeeJFrame = new AddEmployeeJFrame();
            editEmployeeJFrame.setMainFTETableModel((DefaultTableModel) jTable1.getModel());
            editEmployeeJFrame.setMainPTETableModel((DefaultTableModel) jTable2.getModel());
            editEmployeeJFrame.setMainHT(theHT);
            editEmployeeJFrame.enableEditMode();
            editEmployeeJFrame.selectFTERadio();
            editEmployeeJFrame.setEmpNum(empNum);
            editEmployeeJFrame.setFirstName(firstName);
            editEmployeeJFrame.setLastName(lastName);
            editEmployeeJFrame.setGender(genderS);
            editEmployeeJFrame.setWorkLocation(workLS);
            editEmployeeJFrame.setDeductionsRate(deductionsRate);
            editEmployeeJFrame.setAnnualSalary(annualSalary);
            editEmployeeJFrame.setImagePreview(removedFTE.getPhotoPath());
            editEmployeeJFrame.setOriginalData(removedFTE);
            
            editEmployeeJFrame.setVisible(true);

            DefaultTableModel jTable1Model = (DefaultTableModel) jTable1.getModel();
            jTable1Model.removeRow(rowToEdit);
        }
        
    }//GEN-LAST:event_jButton2_FTEEditActionPerformed

    private void jButton1_FTEShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_FTEShowAllActionPerformed
        // TODO add your handling code here:
        // Show All Employees, use after a search
        ((DefaultTableModel)this.jTable1.getModel()).setRowCount(0);
        ((DefaultTableModel)this.jTable2.getModel()).setRowCount(0);
        ArrayList<EmployeeInfo> allEmployees = theHT.getAllFromTable();
        for (EmployeeInfo e: allEmployees){
            Object[] matchingRow = this.changeObjectsToRows(e);
            if (e instanceof FTE) {
                ((DefaultTableModel) this.jTable1.getModel()).addRow(matchingRow);
            } else if (e instanceof PTE) {
                ((DefaultTableModel) this.jTable2.getModel()).addRow(matchingRow);
            }
        }
    }//GEN-LAST:event_jButton1_FTEShowAllActionPerformed

    private void jButton4_PTESearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4_PTESearchActionPerformed
        // TODO add your handling code here:
        // Search button on PTE tab
        ((DefaultTableModel)this.jTable1.getModel()).setRowCount(0);
        ((DefaultTableModel)this.jTable2.getModel()).setRowCount(0);
        String query = this.jFormattedTextField1_PTESearch.getText();
        ArrayList<EmployeeInfo> allEmployees = theHT.getAllFromTable();
        for (EmployeeInfo e: allEmployees){
            if (Integer.toString(e.getEmpNumber()).equals(query)){
                Object[] matchingRow = this.changeObjectsToRows(e);
                if (e instanceof FTE){
                    ((DefaultTableModel)this.jTable1.getModel()).addRow(matchingRow);
                }else if (e instanceof PTE){
                    ((DefaultTableModel)this.jTable2.getModel()).addRow(matchingRow);
                }
            }
        }
        for (EmployeeInfo e: allEmployees){
            String empNumString = Integer.toString(e.getEmpNumber());
            boolean subcheck = empNumString.contains(query);
            if (subcheck && !empNumString.equals(query)){
                Object[] matchingRow = this.changeObjectsToRows(e);
                if (e instanceof FTE){
                    ((DefaultTableModel)this.jTable1.getModel()).addRow(matchingRow);
                }else if (e instanceof PTE){
                    ((DefaultTableModel)this.jTable2.getModel()).addRow(matchingRow);
                }
            }
        }
    }//GEN-LAST:event_jButton4_PTESearchActionPerformed

    private void jButton3_PTERemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3_PTERemoveActionPerformed
        // TODO add your handling code here:
        // Remove on PTE tab
        int rowToRemove = jTable2.getSelectedRow();
        if (rowToRemove != -1){
            int empNum = this.getEmployeeNumberFromSelectedRow(jTable2);
            theHT.removeFromTable(empNum);
            DefaultTableModel jTable2Model = (DefaultTableModel) jTable2.getModel();
            jTable2Model.removeRow(rowToRemove);
        }

    }//GEN-LAST:event_jButton3_PTERemoveActionPerformed

    private void jButton2_PTEEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2_PTEEditActionPerformed
        // TODO add your handling code here:
        // Edit of PTE Tab
        int rowToEdit = jTable2.getSelectedRow();
        if (rowToEdit != -1){
            int empNum = Integer.parseInt(jTable2.getModel().getValueAt(rowToEdit, 0).toString());
            String firstName = jTable2.getModel().getValueAt(rowToEdit, 1).toString();
            String lastName = jTable2.getModel().getValueAt(rowToEdit, 2).toString();
            String genderS = jTable2.getModel().getValueAt(rowToEdit, 3).toString();
            String workLS = jTable2.getModel().getValueAt(rowToEdit, 4).toString();
            double deductionsRate = Double.parseDouble(jTable2.getModel().getValueAt(rowToEdit, 5).toString());
            double hourlyWage = Double.parseDouble(jTable2.getModel().getValueAt(rowToEdit, 6).toString());
            double hoursPerWeek = Double.parseDouble(jTable2.getModel().getValueAt(rowToEdit, 7).toString());
            double weeksPerYear = Double.parseDouble(jTable2.getModel().getValueAt(rowToEdit, 8).toString());

            PTE removedPTE = (PTE) theHT.removeFromTable(empNum);

            AddEmployeeJFrame editEmployeeJFrame = new AddEmployeeJFrame();
            editEmployeeJFrame.setMainFTETableModel((DefaultTableModel) jTable1.getModel());
            editEmployeeJFrame.setMainPTETableModel((DefaultTableModel) jTable2.getModel());
            editEmployeeJFrame.setMainHT(theHT);
            editEmployeeJFrame.enableEditMode();
            editEmployeeJFrame.selectPTERadio();
            editEmployeeJFrame.setEmpNum(empNum);
            editEmployeeJFrame.setFirstName(firstName);
            editEmployeeJFrame.setLastName(lastName);
            editEmployeeJFrame.setGender(genderS);
            editEmployeeJFrame.setWorkLocation(workLS);
            editEmployeeJFrame.setDeductionsRate(deductionsRate);
            editEmployeeJFrame.setHourlyWage(hourlyWage);
            editEmployeeJFrame.setHoursPerWeek(hoursPerWeek);
            editEmployeeJFrame.setWeeksPerYear(weeksPerYear);
            editEmployeeJFrame.setImagePreview(removedPTE.getPhotoPath());
            editEmployeeJFrame.setOriginalData(removedPTE);

            editEmployeeJFrame.setVisible(true);

            DefaultTableModel jTable2Model = (DefaultTableModel) jTable2.getModel();
            jTable2Model.removeRow(rowToEdit);
        }
    }//GEN-LAST:event_jButton2_PTEEditActionPerformed

    private void jButton1_PTEAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_PTEAddActionPerformed
        // TODO add your handling code here:
        // PTE Add Button
        AddEmployeeJFrame addEmployeeJFrame = new AddEmployeeJFrame();
        addEmployeeJFrame.setVisible(true);
        addEmployeeJFrame.setMainFTETableModel((DefaultTableModel) jTable1.getModel());
        addEmployeeJFrame.setMainPTETableModel((DefaultTableModel) jTable2.getModel());
        addEmployeeJFrame.setMainHT(theHT);
    }//GEN-LAST:event_jButton1_PTEAddActionPerformed

    private void jButton1_PTEShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_PTEShowAllActionPerformed
        // TODO add your handling code here:
        // PTE Show All Button
        ((DefaultTableModel)this.jTable1.getModel()).setRowCount(0);
        ((DefaultTableModel)this.jTable2.getModel()).setRowCount(0);
        ArrayList<EmployeeInfo> allEmployees = theHT.getAllFromTable();
        for (EmployeeInfo e: allEmployees){
            Object[] matchingRow = this.changeObjectsToRows(e);
            if (e instanceof FTE) {
                ((DefaultTableModel) this.jTable1.getModel()).addRow(matchingRow);
            } else if (e instanceof PTE) {
                ((DefaultTableModel) this.jTable2.getModel()).addRow(matchingRow);
            }
        }
    }//GEN-LAST:event_jButton1_PTEShowAllActionPerformed

    private void jMenuItem1_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1_SaveAsActionPerformed
        // TODO add your handling code here:
        // Save as, save but file chooser shows every time
        FileWriter fw = null;
        BufferedWriter bw = null;
        
        int saveResult = this.fileChooser.showSaveDialog(this);
        if (saveResult == JFileChooser.APPROVE_OPTION) {
            this.employeesFile = fileChooser.getSelectedFile();
        }
        
        try {
            fw = new FileWriter(this.employeesFile);
            bw = new BufferedWriter(fw);
            ArrayList<EmployeeInfo> allContent = this.theHT.getAllFromTable();
            
            
            for (EmployeeInfo e: allContent){
                if (e instanceof FTE){
                    String out = "FTE, " + e.getEmpNumber() + ", " 
                            + e.getFirstName() + ", " + e.getLastName() + ", "
                            + e.getGender() + ", " + e.getWorkLocation() + ", "
                            + e.getDeductionsRate() + ", " + ((FTE) e).getAnnualSalary()
                            + ", " + e.getPhotoPath();
                    bw.write(out);
                    bw.newLine();
                }else if (e instanceof PTE){
                    String out = "PTE, " + e.getEmpNumber() + ", " 
                            + e.getFirstName() + ", " + e.getLastName() + ", "
                            + e.getGender() + ", " + e.getWorkLocation() + ", "
                            + e.getDeductionsRate() + ", " + ((PTE) e).getHourlyWage() + ", "
                            + ((PTE) e).getHoursPerWeek() + ", " + ((PTE) e).getWeeksPerYear()
                            + ", " + e.getPhotoPath();
                    bw.write(out);
                    bw.newLine();
                }
            }
        } catch (IOException ioe) {
	   ioe.printStackTrace();
	}finally{ 
	   try{
	      if(bw!=null)
		 bw.close();
	   }catch(Exception ex){
	       System.out.println("Error in closing the BufferedWriter"+ex);
	    }
	}
    }//GEN-LAST:event_jMenuItem1_SaveAsActionPerformed

    private void jMenuItem1_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1_ExportActionPerformed
        // TODO add your handling code here:
        // Saves data without images for portability
        FileWriter fw = null;
        BufferedWriter bw = null;
        
        int saveResult = this.fileChooser.showSaveDialog(this);
        if (saveResult == JFileChooser.APPROVE_OPTION) {
            this.employeesFile = fileChooser.getSelectedFile();
        }
        
        try {
            fw = new FileWriter(this.employeesFile);
            bw = new BufferedWriter(fw);
            ArrayList<EmployeeInfo> allContent = this.theHT.getAllFromTable();
            
            
            for (EmployeeInfo e: allContent){
                if (e instanceof FTE){
                    String out = "FTE, " + e.getEmpNumber() + ", " 
                            + e.getFirstName() + ", " + e.getLastName() + ", "
                            + e.getGender() + ", " + e.getWorkLocation() + ", "
                            + e.getDeductionsRate() + ", " + ((FTE) e).getAnnualSalary();
                    bw.write(out);
                    bw.newLine();
                }else if (e instanceof PTE){
                    String out = "PTE, " + e.getEmpNumber() + ", " 
                            + e.getFirstName() + ", " + e.getLastName() + ", "
                            + e.getGender() + ", " + e.getWorkLocation() + ", "
                            + e.getDeductionsRate() + ", " + ((PTE) e).getHourlyWage() + ", "
                            + ((PTE) e).getHoursPerWeek() + ", " + ((PTE) e).getWeeksPerYear();
                    bw.write(out);
                    bw.newLine();
                }
            }
        } catch (IOException ioe) {
	   ioe.printStackTrace();
	}finally{ 
	   try{
	      if(bw!=null)
		 bw.close();
	   }catch(Exception ex){
	       System.out.println("Error in closing the BufferedWriter"+ex);
	    }
	}
    }//GEN-LAST:event_jMenuItem1_ExportActionPerformed

    private void jMenuItem1_ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1_ImportActionPerformed
        // Import is the same as Load since the load code works for export files
        this.jMenuItem2_LoadActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem1_ImportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    
    
    public EmployeeInfo createEmployee(String[] para){
        // Takes array of strings and parses them into EmployeeInfo Objects
        if (para[0].equals("FTE")){
            FTE fteData = new FTE(Integer.parseInt(para[1]), 
                            para[2], para[3],
                            Integer.parseInt(para[4]), 
                            Integer.parseInt(para[5]), 
                            Double.parseDouble(para[6]),
                            Double.parseDouble(para[7]));
            if (para.length == 9){
                fteData.setPhotoPath(para[8]);
            }
            return fteData;
        }else if (para[0].equals("PTE")){
            PTE pteData = new PTE(Integer.parseInt(para[1]), 
                            para[2], para[3],
                            Integer.parseInt(para[4]), 
                            Integer.parseInt(para[5]), 
                            Double.parseDouble(para[6]),
                            Double.parseDouble(para[7]),
                            Double.parseDouble(para[8]),
                            Double.parseDouble(para[9]));
            if (para.length == 11){
                pteData.setPhotoPath(para[10]);
            }
            return pteData;
        }
        return null;
    }
    
    public Object[] changeObjectsToRows(EmployeeInfo employeeObject){
        // Takes object and its attributes and returns array of Objects for JTable rows
        int empNum = employeeObject.getEmpNumber();
        String firstName = employeeObject.getFirstName();
        String lastName = employeeObject.getLastName();
        int gender = employeeObject.getGender();
        int workL = employeeObject.getWorkLocation();
        String genderS, workLocationS;
            switch (gender){
                case 0:
                    genderS = "Male";
                    break;
                case 1:
                    genderS = "Female";
                    break;
                default:
                    genderS = "Other";
            }
            switch (workL){
                case 1:
                    workLocationS = "Ottawa";
                    break;
                case 2:
                    workLocationS = "Chicago";
                    break;
                default:
                    workLocationS = "Mississauga";
                    break;
            }
        if (employeeObject instanceof FTE){
            double annualSalary = ((FTE) employeeObject).getAnnualSalary();
            double grossPay = annualSalary;
            double netPay = ((FTE) employeeObject).calcAnnualNetIncome();
            Object[] fteRow = {empNum, firstName, lastName, 
                genderS, workLocationS, annualSalary, grossPay, netPay};
            return fteRow;
        }else if (employeeObject instanceof PTE){
            double hourlyWage = ((PTE) employeeObject).getHourlyWage();
            double hoursPerWeek = ((PTE) employeeObject).getHoursPerWeek();
            double weeksPerYear = ((PTE) employeeObject).getWeeksPerYear();
            double grossPay = hourlyWage*hoursPerWeek*weeksPerYear;
            double netPay = ((PTE) employeeObject).calcAnnualNetIncome();
            Object[] pteRow = {empNum, firstName, lastName, 
                genderS, workLocationS, hourlyWage, hoursPerWeek, weeksPerYear,
                grossPay, netPay};
            return pteRow;
        }
        return null;
    }
    
    public Object[] changeStringsToRows(String[] para){
        String gender, workLocation;
            switch (Integer.parseInt(para[4])){
                case 0:
                    gender = "Male";
                    break;
                case 1:
                    gender = "Female";
                    break;
                default:
                    gender = "Other";
            }
            switch (Integer.parseInt(para[5])){
                case 1:
                    workLocation = "Ottawa";
                    break;
                case 2:
                    workLocation = "Chicago";
                    break;
                default:
                    workLocation = "Mississauga";
                    break;
            }
        if (para[0].equals("FTE")){
            Object[] fteRow = {Integer.parseInt(para[1]), 
                            para[2], para[3],
                            gender, 
                            workLocation, 
                            Double.parseDouble(para[6]),
                            Double.parseDouble(para[7]),
                            Double.parseDouble(para[7]),
                            Double.parseDouble(para[7])*(1-Double.parseDouble(para[6]))};
            
            return fteRow;
        }else if (para[0].equals("PTE")){
            Object[] pteRow = {Integer.parseInt(para[1]), 
                            para[2], para[3],
                            gender, 
                            workLocation,  
                            Double.parseDouble(para[6]),
                            Double.parseDouble(para[7]),
                            Double.parseDouble(para[8]),
                            Double.parseDouble(para[9]),
                            Double.parseDouble(para[7])*Double.parseDouble(para[8])
                    *Double.parseDouble(para[9]),
                            Double.parseDouble(para[7])*Double.parseDouble(para[8])
                    *Double.parseDouble(para[9])*(1-Double.parseDouble(para[6]))};
                            
            return pteRow;
        }
        return null;
    }
    
    public int getEmployeeNumberFromSelectedRow(JTable jt){
        int column = 0;
        int row = jt.getSelectedRow();
        return Integer.parseInt(jt.getModel().getValueAt(row, column).toString());   
    }
    
    public DefaultTableModel getFTEjTableDefaultModel(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        return model;
    }
    
    public DefaultTableModel getPTEjTableDefaultModel(){
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        return model;
    }
    
    public void updateImage(boolean employeeType, int index){
        // Updates the image on the JFrame
        JTable whichTable = this.jTable2;
        if (employeeType){
            whichTable = this.jTable1;
        }
        int rowCount = whichTable.getRowCount();
        
        if (-1 < index && index < rowCount){
            int empNum = Integer.parseInt(whichTable.getModel().getValueAt(index, 0).toString());
            EmployeeInfo emp = this.theHT.getFromTable(empNum);
            //System.out.println(emp.getPhotoPath());
            try{
                if (emp.getPhotoPath() != null){
                    ImageIcon ii = new ImageIcon(scaleImage(90, 90, ImageIO.read(new File(emp.getPhotoPath()))));
                    if (employeeType){
                        this.jLabel1_FTEImage.setIcon(ii);
                    }else {
                        this.jLabel1_PTEImage.setIcon(ii);
                    } 
                }  
            }catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
    
    public BufferedImage scaleImage(int w, int h, BufferedImage image){
        // Scales to image to the correct size
        BufferedImage bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, w, h, null);
        g2d.dispose();
        return bi;
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_FTEAdd;
    private javax.swing.JButton jButton1_FTEShowAll;
    private javax.swing.JButton jButton1_PTEAdd;
    private javax.swing.JButton jButton1_PTEShowAll;
    private javax.swing.JButton jButton2_FTEEdit;
    private javax.swing.JButton jButton2_PTEEdit;
    private javax.swing.JButton jButton3_FTERemove;
    private javax.swing.JButton jButton3_PTERemove;
    private javax.swing.JButton jButton4_FTESearch;
    private javax.swing.JButton jButton4_PTESearch;
    private javax.swing.JFormattedTextField jFormattedTextField1_FTESearch;
    private javax.swing.JFormattedTextField jFormattedTextField1_PTESearch;
    private javax.swing.JLabel jLabel1_FTEImage;
    private javax.swing.JLabel jLabel1_PTEImage;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1_Export;
    private javax.swing.JMenuItem jMenuItem1_Import;
    private javax.swing.JMenuItem jMenuItem1_Save;
    private javax.swing.JMenuItem jMenuItem1_SaveAs;
    private javax.swing.JMenuItem jMenuItem2_Load;
    private javax.swing.JPanel jPanel1_FTE;
    private javax.swing.JPanel jPanel2_PTE;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1_PTEAdd;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
